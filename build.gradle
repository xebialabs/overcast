plugins {
    id "com.github.hierynomus.license" version "0.15.0"
    id "com.github.node-gradle.node" version "3.1.0"
    id 'groovy'
    id 'idea'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id 'maven-publish'
    id 'nebula.release' version '15.3.1'
    id 'signing'
}

group = 'com.xebialabs.cloud'
defaultTasks 'build'

def releasedVersion = "10.3.0-${(new Date().format('Mdd.Hmm'))}"
project.ext.set("releasedVersion", releasedVersion)

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'license'

    license {
        header rootProject.file("${rootProject.projectDir}/gradle/license-header")
        ext.year = '2021'
        ext.name = 'Digital.ai'
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    implementation 'com.amazonaws:aws-java-sdk:1.3.30'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.6.0'
    implementation 'com.hierynomus:sshj:0.26.0'
    // docker-client and friends
    implementation "com.spotify:docker-client:8.16.0"
    // appease annotation warnings in docker-client
    implementation 'com.typesafe:config:1.2.1'
    implementation 'com.xebialabs.overthere:overthere:5.0.3'
    // appease annotation warnings in docker-client
    implementation 'commons-io:commons-io:2.4'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.0.1'

    // JNA version is pretty important only 3.3.0 seen working so far
    implementation 'net.java.dev.jna:jna:3.3.0'

    implementation 'org.apache.httpcomponents:httpclient:4.5.3'
    implementation 'org.apache.httpcomponents:httpcore:4.4.6'

    implementation 'org.jdom:jdom2:2.0.5'
    implementation 'org.libvirt:libvirt:0.5.1'
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"

    testImplementation(platform("org.junit:junit-bom:${jUnitVersion}"))

    testImplementation "org.hamcrest:hamcrest-core:${hamcrestVersion}"
    testImplementation "org.hamcrest:hamcrest-library:${hamcrestVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
    testImplementation("org.mockito:mockito-core:${mockitoCoreVersion}") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }

    testRuntimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
    testRuntimeOnly "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    testRuntimeOnly "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
}

allprojects {
    configurations.all*.exclude group: 'commons-logging', module: 'commons-logging'

    sourceCompatibility = languageLevel
    targetCompatibility = languageLevel

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://download.java.net/maven/2/'
        }
        maven {
            url 'https://oss.sonatype.org/content/repositories/releases'
        }
        maven {
            url 'https://www.libvirt.org/maven2/'
        }
    }

    tasks.register("itest", Test).configure {
        useJUnitPlatform()

        description = "Run the integration tests."
        group = 'Integration tests'

        filter {
            includeTestsMatching '*Itest'
        }

        reports {
            junitXml.outputLocation.set(layout.buildDirectory.dir("itest-results"))
        }
    }
}

tasks.test {
    useJUnitPlatform()

    reports {
        junitXml.outputLocation.set(layout.buildDirectory.dir("itest-results"))
    }

    filter {
        includeTestsMatching 'com.xebialabs.overcast.*'
        excludeTestsMatching '*Itest'
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

java {
    withJavadocJar()
    withSourcesJar()
}

if (project.hasProperty("sonatypeUsername") && project.hasProperty("public")) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)

                groupId = 'com.xebialabs.cloud'
                artifactId = 'overcast'
                version = releasedVersion

                pom {
                    name = 'Overcast'
                    description = 'A Java library to test against hosts in the cloud.'
                    url = 'https://github.com/xebialabs/overcast.git'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    scm {
                        url = 'https://github.com/xebialabs/overcast'
                    }

                    developers {
                        developer {
                            id = 'vpartington'
                            name = 'Vincent Partington'
                            email = 'vpartington@digital.ai'
                        }
                        developer {
                            id = 'hierynomus'
                            name = 'Jeroen van Erp'
                            email = 'jvanerp@digital.ai'
                        }
                        developer {
                            id = 'mkotsur'
                            name = 'Mike Kotsur'
                            email = 'mkotsur@digital.ai'
                        }
                        developer {
                            id = 'rklaren'
                            name = 'Ric Klaren'
                            email = 'rklaren@digital.ai'
                        }
                        developer {
                            id = 'pvanderende'
                            name = 'Paul van der Ende'
                            email = 'pvanderende@digital.ai'
                        }
                    }
                }
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = project.property("sonatypeUsername")
                    password = project.property("sonatypePassword")
                }
            }
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots"
                credentials {
                    username = project.property("sonatypeUsername")
                    password = project.property("sonatypePassword")
                }
            }
        }
    }
} else {
    publishing {
        publications {
            myLibrary(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                url "${project.property("nexusBaseUrl")}/repositories/releases"
                credentials {
                    username = project.property("nexusUserName")
                    password = project.property("nexusPassword")
                }
            }
        }
    }
}

jar {
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


if (project.hasProperty("sonatypeUsername") && project.hasProperty("public")) {
    signing {
        sign publishing.publications.mavenJava
    }

    nexusPublishing {
        repositories {
            sonatype {
                username = project.property("sonatypeUsername")
                password = project.property("sonatypePassword")
            }
        }
    }
}

import com.xebialabs.gradle.release.NebulaRelease

task nebulaRelease(type: NebulaRelease)

task uploadArchives {
    dependsOn publish
}

task dumpVersion {
    doLast {
        file(buildDir).mkdirs()
        def out = file("$buildDir/version.dump")
        out.write("version=$project.version")
    }
}
