// Configuration KVM environment
// - bridged network br0

// Configuration needed in users overcast.conf
// overcastItest {
//   libvirtUrl=
//   dhcpHostUrl=
//   dhcpLeasesLocation=
//   dhcpTimeout=30 // optional
//   bootDelay=5    // optional
//   network="default" // optional
// }

itest.basebox="base-overcast-itest"
itest.staticbasebox= "base-overcast-static-itest"
itest.windowsbasebox="base-overcast-win2k8r2"

// overcastBasebox setup:
// Ubuntu LTS 12
// ssh enabled and accessible
// ubuntu useradd test -m -s /bin/bash -G sudo
// visudo
// Change sudo line: %sudo ALL=(ALL:ALL) NOPASSWD: ALL
// Generate a password less SSH key pair for the 'test' user using ssh-key-gen
// cat .ssh/id_rsa.pub >> .ssh/authorized_keys
// copy the ~test/.ssh/id_rsa to the ~/.ssh/overcast-itest.id_rsa of the system/user running the itest
// # install 9p drivers into initrd image
// cat - >> /etc/initramfs-tools/modules <<EOF
// 9p
// 9pnet
// 9pnet_virtio
// EOF
// update-initramfs -u

// windows base boxovercastItest.basebox
// enable winrm (see instructions https://github.com/xebialabs/overthere#cifs_host_setup):
// > winrm quickconfig
// > winrm set winrm/config/service/Auth @{Basic="true"}
// > winrm set winrm/config/service @{AllowUnencrypted="true"}
// > winrm set winrm/config/winrs @{MaxMemoryPerShellMB="1024"}
// > services.msc > ensure Windows Remote Management service is set to start automatic and not delayed start
// create a test local admin user with password: Sha4gouV
// Disable various nuisances:
// - Disable shutdown tracker: gpedit.msc > Computer Configuration / Administrative Templates / System > Display Shutdown Event Tracker > Disabled
// - Tweak password strength policies: 'Start' -> 'Administrative Tools' -> 'Local Security Policy' > 'Security Settings' -> 'Acount Policies' -> 'Password Policy'
//   - Set 'Maximum password age' to 0,
//   - Disable 'Password must meet complexity requirements'.
//   - Enable rdesktop.
// ensure your DHCP server sets the microsoft extensions to let windows machines release their lease on shutdown
// For dnsmasq this is done by adding this configuration option: dhcp-option=vendor:MSFT,2,1i

overcastLibVirtItestTemplate {
    libvirtURL=${itest.libvirtUrl}
    baseDomain=${itest.basebox}
    network=${itest.network}
    bootDelay=${itest.bootDelay}
}

overcastLibVirtSshLookupTempate {
    ipLookupStrategy="SSH"
    SSH = ${itest.SSH}
}

overcastLibVirtStaticIpTemplate {
    ipLookupStrategy="static"
    static {
        ip = "10.0.1.35"
    }
}

overcastLibVirtItestBridgedDhcpHost = ${overcastLibVirtItestTemplate}
overcastLibVirtItestBridgedDhcpHost = ${overcastLibVirtSshLookupTempate}
overcastLibVirtItestBridgedDhcpHost {
    baseDomain=${itest.basebox}
}

overcastLibVirtItestBridgedProvisionedDhcpHost = ${overcastLibVirtItestTemplate}
overcastLibVirtItestBridgedProvisionedDhcpHost = ${overcastLibVirtSshLookupTempate}
overcastLibVirtItestBridgedProvisionedDhcpHost {
    baseDomain=${itest.basebox}
    provision {
        url="ssh://test@{0}?os=UNIX&connectionType=SUDO&sudoUsername=root&allocatePty=xterm:80:24:0:0&privateKeyFile="${user.home}"/.ssh/overcast-itest.id_rsa"
        cmd="""touch /OVERCAST-WAS-HERE"""
        expirationTag.cmd="echo checksum!"
    }
}

overcastLibVirtItestBridgedDhcpHostFailedOnExit = ${overcastLibVirtItestTemplate}
overcastLibVirtItestBridgedDhcpHostFailedOnExit = ${overcastLibVirtSshLookupTempate}
overcastLibVirtItestBridgedDhcpHostFailedOnExit {
    provision {
        url="ssh://test@{0}?os=UNIX&connectionType=SUDO&sudoUsername=root&allocatePty=xterm:80:24:0:0&privateKeyFile="${user.home}"/.ssh/overcast-itest.id_rsa"
        cmd="""bash -c "exit 1""""
        expirationTag.cmd="echo checksum!"
    }
}

overcastLibVirtItestBridgedDhcpHostFailedOnStdErr = ${overcastLibVirtItestTemplate}
overcastLibVirtItestBridgedDhcpHostFailedOnStdErr = ${overcastLibVirtSshLookupTempate}
overcastLibVirtItestBridgedDhcpHostFailedOnStdErr {
    baseDomain=${itest.basebox}
    provision {
        url="ssh://test@{0}?os=UNIX&connectionType=SUDO&sudoUsername=root&allocatePty=xterm:80:24:0:0&privateKeyFile="${user.home}"/.ssh/overcast-itest.id_rsa"
        cmd="""bash -c "echo 'oh noes!' >&2""""
        expirationTag.cmd="echo checksum!"
    }
}

overcastItestStaticIpHost = ${overcastLibVirtStaticIpTemplate}
overcastItestStaticIpHost {
    libvirtURL=${itest.libvirtUrl}
    baseDomain=${itest.staticbasebox}
}

overcastItestProvisionedStaticIpHost = ${overcastItestStaticIpHost}
overcastItestProvisionedStaticIpHost {
    bootDelay=${itest.bootDelay}
    provision {
        url="ssh://test@{0}?os=UNIX&connectionType=SUDO&sudoUsername=root&allocatePty=xterm:80:24:0:0&privateKeyFile="${user.home}"/.ssh/overcast-itest.id_rsa"
        cmd="""touch /OVERCAST-WAS-HERE"""
        expirationTag.cmd="echo checksum!"
    }
}

overcastLibVirtItestHostWithFsMapping = ${overcastLibVirtItestTemplate}
overcastLibVirtItestHostWithFsMapping = ${overcastLibVirtSshLookupTempate}
overcastLibVirtItestHostWithFsMapping {
    fsMapping {
        tmp { hostPath = "/tmp", readOnly = true }
    }
    provision {
        url="ssh://test@{0}?os=UNIX&connectionType=SUDO&sudoUsername=root&allocatePty=xterm:80:24:0:0&privateKeyFile="${user.home}"/.ssh/overcast-itest.id_rsa"
        cmd="""sudo bash -c "echo \"tmp /mnt 9p ro,trans=virtio\">> /etc/fstab && mount /mnt""""
        expirationTag.cmd="echo checksum!"
    }
}

overcastLibVirtItestWindows = ${overcastLibVirtItestTemplate}
overcastLibVirtItestWindows = ${overcastLibVirtSshLookupTempate}
overcastLibVirtItestWindows {
    baseDomain=${itest.windowsbasebox}
    bootDelay=5
    provision {
        url="cifs://test@{0}?os=WINDOWS&connectionType=WINRM_INTERNAL&connectionTimeoutMillis=1000&password=Sha4gouV"
        cmd="""type nul >>/OVERCAST-WAS-HERE""""
        expirationTag.cmd="echo checksum!"
    }
}
